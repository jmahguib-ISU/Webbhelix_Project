> ##########Running an ANalysis Of VAriance and a Kruskal-Wallis test in R##########
> 
> 
> ###Manually load the 'dplyr' library package before running this script###
> 
> 
> ###Set the working directory as the directory where your input files are stored
> 
> setwd("~/Desktop/MinSampSize_R_aov_InputFiles/FstRslts_R_aov_input_files")
> 
> 
> ###Import tab delimited .txt file and assign it to object "my_data"
> 
> my_data <- read.delim("TGCP_STT_pairwise_Fst_R_aov_input_data.txt", header = TRUE, sep = "\t", quote = "")
> 
> 
> ###Have the 'dplyr' R package take a random sampling of your data and print it to the console so you can check that your using the correct input file and that it's formatted appropriately
> 
> set.seed(1234)
> dplyr::sample_n(my_data, 10)
    TGCP_STT_Fst_estimates Subsampling_group
114               0.169014        x06SubSamp
622               0.171271        x16SubSamp
609               0.167967        x16SubSamp
999               0.169090        x22SubSamp
858               0.169281        x20SubSamp
638               0.165368        x16SubSamp
10                0.165280        x04SubSamp
231               0.167746        x08SubSamp
661               0.168750        x16SubSamp
510               0.168978        x14SubSamp
> 
> 
> ###Print your data's group names (called by R "levels") to check they appear in desired order
> 
> levels(my_data$Subsampling_group)
 [1] "x04SubSamp" "x06SubSamp" "x08SubSamp" "x10SubSamp" "x12SubSamp" "x14SubSamp"
 [7] "x16SubSamp" "x18SubSamp" "x20SubSamp" "x22SubSamp"
> 
> 
> ###Calculate and output summary statistics for your data, including datum counts, data mean and standard deviation
> 
> group_by(my_data, Subsampling_group) %>%
+   summarise(
+     count = n(),
+     mean = mean(TGCP_STT_Fst_estimates, na.rm = TRUE),
+     sd = sd(TGCP_STT_Fst_estimates, na.rm = TRUE)
+   )
# A tibble: 10 x 4
   Subsampling_group count  mean       sd
   <fct>             <int> <dbl>    <dbl>
 1 x04SubSamp          100 0.168 0.0105  
 2 x06SubSamp          100 0.169 0.00755 
 3 x08SubSamp          100 0.169 0.00510 
 4 x10SubSamp          100 0.169 0.00416 
 5 x12SubSamp          100 0.169 0.00373 
 6 x14SubSamp          100 0.169 0.00256 
 7 x16SubSamp          100 0.169 0.00239 
 8 x18SubSamp          100 0.170 0.00188 
 9 x20SubSamp          100 0.169 0.00134 
10 x22SubSamp          100 0.170 0.000921
> 
> 
> 
> ###Assign the command for running an analysis of variance (aov) to an object, in this case called "res.aov;" the portion of the aov command that is in parentheses consists of the column header for the column containing your dependant variable (your data), followed by a '~' and then the column header for the column containing your independent variable (your group assignments for each data point), followed by designation of your previously established data object to 'data =' (in this case "my_data")
> 
> res.aov <- aov(TGCP_STT_Fst_estimates ~ Subsampling_group, data = my_data)
> 
> 
> ###Print a summary of the results of the ANOVA analyses designated by the previous command
> 
> summary(res.aov)
                   Df   Sum Sq   Mean Sq F value Pr(>F)
Subsampling_group   9 0.000165 1.828e-05   0.753  0.661
Residuals         990 0.024044 2.429e-05               
> 
> 
> 
> ###Run a Tukey multiple pairwise comparisons test on the fitted ANOVA from the previous command, and output the results to check which pairwise group comparisons are statistically significantly different from each other
> 
> TukeyHSD(res.aov)
  Tukey multiple comparisons of means
    95% family-wise confidence level

Fit: aov(formula = TGCP_STT_Fst_estimates ~ Subsampling_group, data = my_data)

$Subsampling_group
                             diff           lwr        upr     p adj
x06SubSamp-x04SubSamp  0.00101885 -0.0011911198 0.00322882 0.9066989
x08SubSamp-x04SubSamp  0.00079006 -0.0014199098 0.00300003 0.9811839
x10SubSamp-x04SubSamp  0.00105322 -0.0011567498 0.00326319 0.8878048
x12SubSamp-x04SubSamp  0.00064022 -0.0015697498 0.00285019 0.9958847
x14SubSamp-x04SubSamp  0.00047310 -0.0017368698 0.00268307 0.9996228
x16SubSamp-x04SubSamp  0.00124310 -0.0009668698 0.00345307 0.7456007
x18SubSamp-x04SubSamp  0.00138973 -0.0008202398 0.00359970 0.6034654
x20SubSamp-x04SubSamp  0.00104702 -0.0011629498 0.00325699 0.8913761
x22SubSamp-x04SubSamp  0.00129589 -0.0009140798 0.00350586 0.6965845
x08SubSamp-x06SubSamp -0.00022879 -0.0024387598 0.00198118 0.9999993
x10SubSamp-x06SubSamp  0.00003437 -0.0021755998 0.00224434 1.0000000
x12SubSamp-x06SubSamp -0.00037863 -0.0025885998 0.00183134 0.9999412
x14SubSamp-x06SubSamp -0.00054575 -0.0027557198 0.00166422 0.9988061
x16SubSamp-x06SubSamp  0.00022425 -0.0019857198 0.00243422 0.9999994
x18SubSamp-x06SubSamp  0.00037088 -0.0018390898 0.00258085 0.9999506
x20SubSamp-x06SubSamp  0.00002817 -0.0021817998 0.00223814 1.0000000
x22SubSamp-x06SubSamp  0.00027704 -0.0019329298 0.00248701 0.9999960
x10SubSamp-x08SubSamp  0.00026316 -0.0019468098 0.00247313 0.9999974
x12SubSamp-x08SubSamp -0.00014984 -0.0023598098 0.00206013 1.0000000
x14SubSamp-x08SubSamp -0.00031696 -0.0025269298 0.00189301 0.9999871
x16SubSamp-x08SubSamp  0.00045304 -0.0017569298 0.00266301 0.9997358
x18SubSamp-x08SubSamp  0.00059967 -0.0016102998 0.00280964 0.9975035
x20SubSamp-x08SubSamp  0.00025696 -0.0019530098 0.00246693 0.9999979
x22SubSamp-x08SubSamp  0.00050583 -0.0017041398 0.00271580 0.9993501
x12SubSamp-x10SubSamp -0.00041300 -0.0026229698 0.00179697 0.9998776
x14SubSamp-x10SubSamp -0.00058012 -0.0027900898 0.00162985 0.9980697
x16SubSamp-x10SubSamp  0.00018988 -0.0020200898 0.00239985 0.9999999
x18SubSamp-x10SubSamp  0.00033651 -0.0018734598 0.00254648 0.9999785
x20SubSamp-x10SubSamp -0.00000620 -0.0022161698 0.00220377 1.0000000
x22SubSamp-x10SubSamp  0.00024267 -0.0019672998 0.00245264 0.9999987
x14SubSamp-x12SubSamp -0.00016712 -0.0023770898 0.00204285 1.0000000
x16SubSamp-x12SubSamp  0.00060288 -0.0016070898 0.00281285 0.9973985
x18SubSamp-x12SubSamp  0.00074951 -0.0014604598 0.00295948 0.9869617
x20SubSamp-x12SubSamp  0.00040680 -0.0018031698 0.00261677 0.9998922
x22SubSamp-x12SubSamp  0.00065567 -0.0015542998 0.00286564 0.9950765
x16SubSamp-x14SubSamp  0.00077000 -0.0014399698 0.00297997 0.9842482
x18SubSamp-x14SubSamp  0.00091663 -0.0012933398 0.00312660 0.9502057
x20SubSamp-x14SubSamp  0.00057392 -0.0016360498 0.00278389 0.9982251
x22SubSamp-x14SubSamp  0.00082279 -0.0013871798 0.00303276 0.9752211
x18SubSamp-x16SubSamp  0.00014663 -0.0020633398 0.00235660 1.0000000
x20SubSamp-x16SubSamp -0.00019608 -0.0024060498 0.00201389 0.9999998
x22SubSamp-x16SubSamp  0.00005279 -0.0021571798 0.00226276 1.0000000
x20SubSamp-x18SubSamp -0.00034271 -0.0025526798 0.00186726 0.9999748
x22SubSamp-x18SubSamp -0.00009384 -0.0023038098 0.00211613 1.0000000
x22SubSamp-x20SubSamp  0.00024887 -0.0019610998 0.00245884 0.9999984

> 
> 
> ###Plot first the Residuals vs Fitted values from the fitted ANOVA in order to check for homogeneity of variance (which is an assumption of ANOVA), then plot a normality plot of residuals to check that the data are normally distributed (another assumption of ANOVA); the quantiles of the residuals are plotted against the quantiles of the normal distribution
> 
> plot(res.aov, 1)
> plot(res.aov, 2)
> 
> 
> ###Perform a Shapiro-Wilk test as an additional check for normality of the data
> 
> aov_residuals <- residuals(object = res.aov )
> shapiro.test(x = aov_residuals )

	Shapiro-Wilk normality test

data:  aov_residuals
W = 0.91295, p-value < 2.2e-16

> 
> 
> ###In the case that either or both tests for the assumptions of an ANOVA are not passed, a non-parametric test for comparison of group means is performed here in the form of a Kruskal-Wallis rank sum test
> 
> kruskal.test(TGCP_STT_Fst_estimates ~ Subsampling_group, data = my_data)

	Kruskal-Wallis rank sum test

data:  TGCP_STT_Fst_estimates by Subsampling_group
Kruskal-Wallis chi-squared = 12.371, df = 9, p-value = 0.1932

> 
> 
> ###As a follow-up to the Kruskal-Wallis to check which specific group pairs are statistically significantly different from each other, a pairwise t-test is done here with corrections for multiple testing
> 
> pairwise.t.test(my_data$TGCP_STT_Fst_estimates, my_data$Subsampling_group,
+                 p.adjust.method = "BH")

	Pairwise comparisons using t tests with pooled SD 

data:  my_data$TGCP_STT_Fst_estimates and my_data$Subsampling_group 

           x04SubSamp x06SubSamp x08SubSamp x10SubSamp x12SubSamp x14SubSamp x16SubSamp
x06SubSamp 0.94       -          -          -          -          -          -         
x08SubSamp 0.94       0.94       -          -          -          -          -         
x10SubSamp 0.94       0.99       0.94       -          -          -          -         
x12SubSamp 0.94       0.94       0.94       0.94       -          -          -         
x14SubSamp 0.94       0.94       0.94       0.94       0.94       -          -         
x16SubSamp 0.94       0.94       0.94       0.94       0.94       0.94       -         
x18SubSamp 0.94       0.94       0.94       0.94       0.94       0.94       0.94      
x20SubSamp 0.94       0.99       0.94       0.99       0.94       0.94       0.94      
x22SubSamp 0.94       0.94       0.94       0.94       0.94       0.94       0.99      
           x18SubSamp x20SubSamp
x06SubSamp -          -         
x08SubSamp -          -         
x10SubSamp -          -         
x12SubSamp -          -         
x14SubSamp -          -         
x16SubSamp -          -         
x18SubSamp -          -         
x20SubSamp 0.94       -         
x22SubSamp 0.98       0.94      

P value adjustment method: BH 
> 
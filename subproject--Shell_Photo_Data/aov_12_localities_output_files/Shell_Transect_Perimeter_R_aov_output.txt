> ##########Running an ANalysis Of VAriance and a Kruskal-Wallis test in R##########
> 
> 
> ###Manually load the 'dplyr' library package before running this script###
> 
> 
> ###Set the working directory as the directory where your input files are stored
> 
> setwd("~/Desktop/Shell_Photo_Project_Data/aov_input_files")
> 
> 
> ###Import tab delimited .txt file and assign it to object "my_data"
> 
> my_data <- read.delim("Shell_Transect_Perimeter_R_aov_input_data.txt", header = TRUE, sep = "\t", quote = "")
> 
> 
> ###Have the 'dplyr' R package take a random sampling of your data and print it to the console so you can check that your using the correct input file and that it's formatted appropriately
> 
> set.seed(1234)
> dplyr::sample_n(my_data, 10)
    Perimeter Population
31       2.19       CRWA
166      2.34       PCRA
162      2.20       PCRA
165      2.58       PCRA
227      2.58        RRL
168      2.46       PCRA
3        2.11        CPS
61       2.52       DHFA
173      1.93       PCRA
133      2.11       OICP
> 
> 
> ###Print your data's group names (called by R "levels") to check they appear in desired order
> 
> levels(my_data$Population)
 [1] "CPS"  "CRWA" "DHFA" "FPPI" "HGRF" "IRO"  "OICP" "PCRA" "PPNP" "PTP"  "RRL"  "RRO" 
> 
> 
> ###Calculate and output summary statistics for your data, including datum counts, data mean and standard deviation
> 
> group_by(my_data, Population) %>%
+   summarise(
+     count = n(),
+     mean = mean(Perimeter, na.rm = TRUE),
+     sd = sd(Perimeter, na.rm = TRUE)
+   )
# A tibble: 12 x 4
   Population count  mean     sd
   <fct>      <int> <dbl>  <dbl>
 1 CPS           23  2.16 0.108 
 2 CRWA          25  2.16 0.0922
 3 DHFA          22  2.38 0.109 
 4 FPPI          20  2.23 0.245 
 5 HGRF          21  1.91 0.106 
 6 IRO           18  2.27 0.295 
 7 OICP          23  2.07 0.102 
 8 PCRA          21  2.28 0.184 
 9 PPNP          27  1.94 0.219 
10 PTP           21  1.89 0.315 
11 RRL           25  2.35 0.211 
12 RRO           21  2.30 0.149 
> 
> 
> 
> ###Assign the command for running an analysis of variance (aov) to an object, in this case called "res.aov;" the portion of the aov command that is in parentheses consists of the column header for the column containing your dependant variable (your data), followed by a '~' and then the column header for the column containing your independent variable (your group assignments for each data point), followed by designation of your previously established data object to 'data =' (in this case "my_data")
> 
> res.aov <- aov(Perimeter ~ Population, data = my_data)
> 
> 
> ###Print a summary of the results of the ANOVA analyses designated by the previous command
> 
> summary(res.aov)
             Df Sum Sq Mean Sq F value Pr(>F)    
Population   11  7.405  0.6732   18.64 <2e-16 ***
Residuals   255  9.209  0.0361                   
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> 
> 
> ###Run a Tukey multiple pairwise comparisons test on the fitted ANOVA from the previous command, and output the results to check which pairwise group comparisons are statistically significantly different from each other
> 
> TukeyHSD(res.aov)
  Tukey multiple comparisons of means
    95% family-wise confidence level

Fit: aov(formula = Perimeter ~ Population, data = my_data)

$Population
                  diff          lwr          upr     p adj
CRWA-CPS  -0.001304348 -0.182430458  0.179821762 1.0000000
DHFA-CPS   0.218241107  0.031291153  0.405191060 0.0080724
FPPI-CPS   0.068195652 -0.123472376  0.259863680 0.9904903
HGRF-CPS  -0.249875776 -0.439087105 -0.060664447 0.0011419
IRO-CPS    0.108140097 -0.089141294  0.305421487 0.8122069
OICP-CPS  -0.095217391 -0.280078453  0.089643670 0.8672436
PCRA-CPS   0.121076605 -0.068134724  0.310287934 0.6154934
PPNP-CPS  -0.219822866 -0.397705506 -0.041940227 0.0034790
PTP-CPS   -0.275590062 -0.464801391 -0.086378733 0.0001652
RRL-CPS    0.190295652  0.009169542  0.371421762 0.0299093
RRO-CPS    0.142028986 -0.047182343  0.331240314 0.3598326
DHFA-CRWA  0.219545455  0.036287874  0.402803035 0.0055727
FPPI-CRWA  0.069500000 -0.118568308  0.257568308 0.9870555
HGRF-CRWA -0.248571429 -0.434135387 -0.063007471 0.0008817
IRO-CRWA   0.109444444 -0.084341527  0.303230416 0.7807581
OICP-CRWA -0.093913043 -0.275039153  0.087213066 0.8620479
PCRA-CRWA  0.122380952 -0.063183006  0.307944910 0.5688961
PPNP-CRWA -0.218518519 -0.392516475 -0.044520562 0.0026905
PTP-CRWA  -0.274285714 -0.459849672 -0.088721756 0.0001196
RRL-CRWA   0.191600000  0.014287499  0.368912501 0.0217207
RRO-CRWA   0.143333333 -0.042230625  0.328897291 0.3154450
FPPI-DHFA -0.150045455 -0.343728975  0.043638066 0.3109896
HGRF-DHFA -0.468116883 -0.659369596 -0.276864171 0.0000000
IRO-DHFA  -0.110101010 -0.309341117  0.089139097 0.8040138
OICP-DHFA -0.313458498 -0.500408452 -0.126508544 0.0000051
PCRA-DHFA -0.097164502 -0.288417215  0.094088210 0.8775585
PPNP-DHFA -0.438063973 -0.618116483 -0.258011463 0.0000000
PTP-DHFA  -0.493831169 -0.685083881 -0.302578456 0.0000000
RRL-DHFA  -0.027945455 -0.211203035  0.155312126 0.9999972
RRO-DHFA  -0.076212121 -0.267464834  0.115040591 0.9766365
HGRF-FPPI -0.318071429 -0.513938598 -0.122204259 0.0000122
IRO-FPPI   0.039944444 -0.163729236  0.243618125 0.9999631
OICP-FPPI -0.163413043 -0.355081072  0.028254985 0.1810957
PCRA-FPPI  0.052880952 -0.142986217  0.248748121 0.9991674
PPNP-FPPI -0.288018519 -0.472965144 -0.103071893 0.0000354
PTP-FPPI  -0.343785714 -0.539652883 -0.147918545 0.0000013
RRL-FPPI   0.122100000 -0.065968308  0.310168308 0.5933796
RRO-FPPI   0.073833333 -0.122033836  0.269700502 0.9848322
IRO-HGRF   0.358015873  0.156652366  0.559379380 0.0000009
OICP-HGRF  0.154658385 -0.034552944  0.343869714 0.2341784
PCRA-HGRF  0.370952381  0.177488581  0.564416181 0.0000001
PPNP-HGRF  0.030052910 -0.152346510  0.212452330 0.9999938
PTP-HGRF  -0.025714286 -0.219178086  0.167749514 0.9999993
RRL-HGRF   0.440171429  0.254607471  0.625735387 0.0000000
RRO-HGRF   0.391904762  0.198440962  0.585368562 0.0000000
OICP-IRO  -0.203357488 -0.400638879 -0.006076097 0.0367264
PCRA-IRO   0.012936508 -0.188426999  0.214300015 1.0000000
PPNP-IRO  -0.327962963 -0.518720842 -0.137205084 0.0000025
PTP-IRO   -0.383730159 -0.585093666 -0.182366652 0.0000001
RRL-IRO    0.082155556 -0.111630416  0.275941527 0.9629831
RRO-IRO    0.033888889 -0.167474618  0.235252396 0.9999923
PCRA-OICP  0.216293996  0.027082667  0.405505325 0.0107403
PPNP-OICP -0.124605475 -0.302488115  0.053277165 0.4717282
PTP-OICP  -0.180372671 -0.369584000  0.008838658 0.0778521
RRL-OICP   0.285513043  0.104386934  0.466639153 0.0000262
RRO-OICP   0.237246377  0.048035048  0.426457706 0.0027607
PPNP-PCRA -0.340899471 -0.523298891 -0.158500051 0.0000002
PTP-PCRA  -0.396666667 -0.590130467 -0.203202867 0.0000000
RRL-PCRA   0.069219048 -0.116344910  0.254783006 0.9860480
RRO-PCRA   0.020952381 -0.172511419  0.214416181 0.9999999
PTP-PPNP  -0.055767196 -0.238166616  0.126632224 0.9974102
RRL-PPNP   0.410118519  0.236120562  0.584116475 0.0000000
RRO-PPNP   0.361851852  0.179452432  0.544251272 0.0000000
RRL-PTP    0.465885714  0.280321756  0.651449672 0.0000000
RRO-PTP    0.417619048  0.224155248  0.611082848 0.0000000
RRO-RRL   -0.048266667 -0.233830625  0.137297291 0.9994132

> 
> 
> ###Plot first the Residuals vs Fitted values from the fitted ANOVA in order to check for homogeneity of variance (which is an assumption of ANOVA), then plot a normality plot of residuals to check that the data are normally distributed (another assumption of ANOVA); the quantiles of the residuals are plotted against the quantiles of the normal distribution
> 
> plot(res.aov, 1)
> plot(res.aov, 2)
> 
> 
> ###Perform a Shapiro-Wilk test as an additional check for normality of the data
> 
> aov_residuals <- residuals(object = res.aov )
> shapiro.test(x = aov_residuals )

	Shapiro-Wilk normality test

data:  aov_residuals
W = 0.92677, p-value = 3.367e-10

> 
> 
> ###In the case that either or both tests for the assumptions of an ANOVA are not passed, a non-parametric test for comparison of group means is performed here in the form of a Kruskal-Wallis rank sum test
> 
> kruskal.test(Perimeter ~ Population, data = my_data)

	Kruskal-Wallis rank sum test

data:  Perimeter by Population
Kruskal-Wallis chi-squared = 134.15, df = 11, p-value < 2.2e-16

> 
> 
> ###As a follow-up to the Kruskal-Wallis to check which specific group pairs are statistically significantly different from each other, a pairwise t-test is done here with corrections for multiple testing
> 
> pairwise.t.test(my_data$Perimeter, my_data$Population,
+                 p.adjust.method = "BH")

	Pairwise comparisons using t tests with pooled SD 

data:  my_data$Perimeter and my_data$Population 

     CPS     CRWA    DHFA    FPPI    HGRF    IRO     OICP    PCRA    PPNP    PTP     RRL    
CRWA 0.98107 -       -       -       -       -       -       -       -       -       -      
DHFA 0.00034 0.00024 -       -       -       -       -       -       -       -       -      
FPPI 0.28993 0.27372 0.01984 -       -       -       -       -       -       -       -      
HGRF 5.3e-05 4.2e-05 5.9e-13 6.9e-07 -       -       -       -       -       -       -      
IRO  0.10295 0.09541 0.10192 0.57973 6.5e-08 -       -       -       -       -       -      
OICP 0.12446 0.12415 3.1e-07 0.00999 0.01371 0.00156 -       -       -       -       -      
PCRA 0.05488 0.04911 0.12794 0.43303 6.8e-09 0.84514 0.00044 -       -       -       -      
PPNP 0.00015 0.00012 6.1e-13 1.8e-06 0.63538 1.6e-07 0.03571 1.4e-08 -       -       -      
PTP  7.9e-06 6.0e-06 9.4e-14 9.1e-08 0.69293 7.7e-09 0.00361 7.6e-10 0.37024 -       -      
RRL  0.00128 0.00093 0.65508 0.05212 1.8e-12 0.21539 1.4e-06 0.27352 2.0e-12 2.3e-13 -      
RRO  0.02357 0.01984 0.24569 0.27267 1.1e-09 0.63538 0.00012 0.74373 2.2e-09 1.0e-10 0.44571

P value adjustment method: BH 
> 
> 
> 
> 
> #####Example commands for making histogram plots to check data distributions, using R built-in hist() function and the ggplot2 package#####
> 
> hist(my_data$Perimeter)
> qplot(my_data$Perimeter, geom="histogram")
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> ggplot(data=my_data, aes(my_data$Perimeter)) + geom_histogram()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> ##########Running an ANalysis Of VAriance and a Kruskal-Wallis test in R##########
> 
> 
> ###Manually load the 'dplyr' library package before running this script###
> 
> 
> ###Set the working directory as the directory where your input files are stored
> 
> setwd("~/Desktop/Shell_Color/aov_4_popclusters_input_files")
> 
> 
> ###Import tab delimited .txt file and assign it to object "my_data"
> 
> my_data <- read.delim("Shell_Transect_Perimeter_R_aov_input_data.txt", header = TRUE, sep = "\t", quote = "")
> 
> 
> ###Have the 'dplyr' R package take a random sampling of your data and print it to the console so you can check that your using the correct input file and that it's formatted appropriately
> 
> set.seed(1234)
> dplyr::sample_n(my_data, 10)
    Perimeter Population
31       1.97   Cluster1
166      2.41   Cluster2
162      2.33   Cluster2
165      2.30   Cluster2
227      2.04   Cluster3
168      2.64   Cluster2
3        2.24   Cluster1
61       2.08   Cluster1
173      2.27   Cluster2
133      2.49   Cluster2
> 
> 
> ###Print your data's group names (called by R "levels") to check they appear in desired order
> 
> levels(my_data$Population)
[1] "Cluster1" "Cluster2" "Cluster3" "Cluster4"
> 
> 
> ###Calculate and output summary statistics for your data, including datum counts, data mean and standard deviation
> 
> group_by(my_data, Population) %>%
+   summarise(
+     count = n(),
+     mean = mean(Perimeter, na.rm = TRUE),
+     sd = sd(Perimeter, na.rm = TRUE)
+   )
# A tibble: 4 x 4
  Population count  mean    sd
  <fct>      <int> <dbl> <dbl>
1 Cluster1      90  2.01 0.207
2 Cluster2     108  2.27 0.203
3 Cluster3      47  2.06 0.270
4 Cluster4      22  2.38 0.109
> 
> 
> 
> ###Assign the command for running an analysis of variance (aov) to an object, in this case called "res.aov;" the portion of the aov command that is in parentheses consists of the column header for the column containing your dependant variable (your data), followed by a '~' and then the column header for the column containing your independent variable (your group assignments for each data point), followed by designation of your previously established data object to 'data =' (in this case "my_data")
> 
> res.aov <- aov(Perimeter ~ Population, data = my_data)
> 
> 
> ###Print a summary of the results of the ANOVA analyses designated by the previous command
> 
> summary(res.aov)
             Df Sum Sq Mean Sq F value Pr(>F)    
Population    3  4.828  1.6092   35.91 <2e-16 ***
Residuals   263 11.787  0.0448                   
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> 
> 
> ###Run a Tukey multiple pairwise comparisons test on the fitted ANOVA from the previous command, and output the results to check which pairwise group comparisons are statistically significantly different from each other
> 
> TukeyHSD(res.aov)
  Tukey multiple comparisons of means
    95% family-wise confidence level

Fit: aov(formula = Perimeter ~ Population, data = my_data)

$Population
                         diff         lwr        upr     p adj
Cluster2-Cluster1  0.26053704  0.18241554  0.3386585 0.0000000
Cluster3-Cluster1  0.05004255 -0.04846311  0.1485482 0.5551464
Cluster4-Cluster1  0.36554545  0.23536448  0.4957264 0.0000000
Cluster3-Cluster2 -0.21049448 -0.30614254 -0.1148464 0.0000002
Cluster4-Cluster2  0.10500842 -0.02302389  0.2330407 0.1492397
Cluster4-Cluster3  0.31550290  0.17410747  0.4568983 0.0000001

> 
> 
> ###Plot first the Residuals vs Fitted values from the fitted ANOVA in order to check for homogeneity of variance (which is an assumption of ANOVA), then plot a normality plot of residuals to check that the data are normally distributed (another assumption of ANOVA); the quantiles of the residuals are plotted against the quantiles of the normal distribution
> 
> plot(res.aov, 1)
> plot(res.aov, 2)
> 
> 
> ###Perform a Shapiro-Wilk test as an additional check for normality of the data
> 
> aov_residuals <- residuals(object = res.aov )
> shapiro.test(x = aov_residuals )

	Shapiro-Wilk normality test

data:  aov_residuals
W = 0.96221, p-value = 1.847e-06

> 
> 
> ###In the case that either or both tests for the assumptions of an ANOVA are not passed, a non-parametric test for comparison of group means is performed here in the form of a Kruskal-Wallis rank sum test
> 
> kruskal.test(Perimeter ~ Population, data = my_data)

	Kruskal-Wallis rank sum test

data:  Perimeter by Population
Kruskal-Wallis chi-squared = 91.828, df = 3, p-value < 2.2e-16

> 
> 
> ###As a follow-up to the Kruskal-Wallis to check which specific group pairs are statistically significantly different from each other, a pairwise t-test is done here with corrections for multiple testing
> 
> pairwise.t.test(my_data$Perimeter, my_data$Population,
+                 p.adjust.method = "BH")

	Pairwise comparisons using t tests with pooled SD 

data:  my_data$Perimeter and my_data$Population 

         Cluster1 Cluster2 Cluster3
Cluster2 3.7e-15  -        -       
Cluster3 0.190    5.1e-08  -       
Cluster4 1.3e-11  0.042    4.5e-08 

P value adjustment method: BH 
> 
> 
> 
> 
> #####Example commands for making histogram plots to check data distributions, using R built-in hist() function and the ggplot2 package#####
> 
> hist(my_data$Perimeter)
> qplot(my_data$Perimeter, geom="histogram")
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> #ggplot(data=my_data, aes(my_data$Perimeter)) + geom_histogram()
> 
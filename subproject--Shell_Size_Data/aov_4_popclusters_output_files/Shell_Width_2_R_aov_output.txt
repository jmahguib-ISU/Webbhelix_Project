> ##########Running an ANalysis Of VAriance and a Kruskal-Wallis test in R##########
> 
> 
> ###Manually load the 'dplyr' library package before running this script###
> 
> 
> ###Set the working directory as the directory where your input files are stored
> 
> setwd("~/Desktop/Shell_Size/aov_4_popclusters_input_files")
> 
> 
> ###Import tab delimited .txt file and assign it to object "my_data"
> 
> my_data <- read.delim("Shell_Width_2_R_aov_input_data.txt", header = TRUE, sep = "\t", quote = "")
> 
> 
> ###Have the 'dplyr' R package take a random sampling of your data and print it to the console so you can check that your using the correct input file and that it's formatted appropriately
> 
> set.seed(1234)
> dplyr::sample_n(my_data, 10)
    Shell_Width_2 Population
40          16.20   Cluster1
218         18.27   Cluster2
213         17.33   Cluster2
217         18.73   Cluster2
299         17.77   Cluster4
222         17.31   Cluster2
4           15.92   Cluster1
80          16.08   Cluster1
229         17.77   Cluster2
176         17.91   Cluster2
> 
> 
> ###Print your data's group names (called by R "levels") to check they appear in desired order
> 
> levels(my_data$Population)
[1] "Cluster1" "Cluster2" "Cluster3" "Cluster4"
> 
> 
> ###Calculate and output summary statistics for your data, including datum counts, data mean and standard deviation
> 
> group_by(my_data, Population) %>%
+   summarise(
+     count = n(),
+     mean = mean(Shell_Width_2, na.rm = TRUE),
+     sd = sd(Shell_Width_2, na.rm = TRUE)
+   )
# A tibble: 4 x 4
  Population count  mean    sd
  <fct>      <int> <dbl> <dbl>
1 Cluster1     166  16.5  1.20
2 Cluster2     105  18.2  1.11
3 Cluster3      22  18.5  1.34
4 Cluster4      58  18.3  1.05
> 
> 
> 
> ###Assign the command for running an analysis of variance (aov) to an object, in this case called "res.aov;" the portion of the aov command that is in parentheses consists of the column header for the column containing your dependant variable (your data), followed by a '~' and then the column header for the column containing your independent variable (your group assignments for each data point), followed by designation of your previously established data object to 'data =' (in this case "my_data")
> 
> res.aov <- aov(Shell_Width_2 ~ Population, data = my_data)
> 
> 
> ###Print a summary of the results of the ANOVA analyses designated by the previous command
> 
> summary(res.aov)
             Df Sum Sq Mean Sq F value Pr(>F)    
Population    3  292.0   97.34   72.41 <2e-16 ***
Residuals   347  466.4    1.34                   
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> 
> 
> ###Run a Tukey multiple pairwise comparisons test on the fitted ANOVA from the previous command, and output the results to check which pairwise group comparisons are statistically significantly different from each other
> 
> TukeyHSD(res.aov)
  Tukey multiple comparisons of means
    95% family-wise confidence level

Fit: aov(formula = Shell_Width_2 ~ Population, data = my_data)

$Population
                         diff        lwr       upr     p adj
Cluster2-Cluster1  1.78536145  1.4121629 2.1585600 0.0000000
Cluster3-Cluster1  2.04672508  1.3676503 2.7257998 0.0000000
Cluster4-Cluster1  1.80605110  1.3495309 2.2625713 0.0000000
Cluster3-Cluster2  0.26136364 -0.4404146 0.9631419 0.7714273
Cluster4-Cluster2  0.02068966 -0.4689642 0.5103435 0.9995349
Cluster4-Cluster3 -0.24067398 -0.9900912 0.5087433 0.8406596

> 
> 
> ###Plot first the Residuals vs Fitted values from the fitted ANOVA in order to check for homogeneity of variance (which is an assumption of ANOVA), then plot a normality plot of residuals to check that the data are normally distributed (another assumption of ANOVA); the quantiles of the residuals are plotted against the quantiles of the normal distribution
> 
> plot(res.aov, 1)
> plot(res.aov, 2)
> 
> 
> ###Perform a Shapiro-Wilk test as an additional check for normality of the data
> 
> aov_residuals <- residuals(object = res.aov )
> shapiro.test(x = aov_residuals )

	Shapiro-Wilk normality test

data:  aov_residuals
W = 0.99315, p-value = 0.1106

> 
> 
> ###In the case that either or both tests for the assumptions of an ANOVA are not passed, a non-parametric test for comparison of group means is performed here in the form of a Kruskal-Wallis rank sum test
> 
> kruskal.test(Shell_Width_2 ~ Population, data = my_data)

	Kruskal-Wallis rank sum test

data:  Shell_Width_2 by Population
Kruskal-Wallis chi-squared = 144.9, df = 3, p-value < 2.2e-16

> 
> 
> ###As a follow-up to the Kruskal-Wallis to check which specific group pairs are statistically significantly different from each other, a pairwise t-test is done here with corrections for multiple testing
> 
> pairwise.t.test(my_data$Shell_Width_2, my_data$Population,
+                 p.adjust.method = "BH")

	Pairwise comparisons using t tests with pooled SD 

data:  my_data$Shell_Width_2 and my_data$Population 

         Cluster1 Cluster2 Cluster3
Cluster2 < 2e-16  -        -       
Cluster3 1.7e-13  0.49     -       
Cluster4 < 2e-16  0.91     0.49    

P value adjustment method: BH 
> 
> 
> 
> 
> #####Example commands for making histogram plots to check data distributions, using R built-in hist() function and the ggplot2 package#####
> 
> hist(my_data$Shell_Width_2)
> qplot(my_data$Shell_Width_2, geom="histogram")
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> #ggplot(data=my_data, aes(my_data$Shell_Width_2)) + geom_histogram()
> 